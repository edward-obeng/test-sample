name: PR Validation

on:
  push:
    branches: [dev]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Needed for commit validation

      # - name: Setup Package
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: "18"
      #     cache: "npm"

      # - name: Install dependencies
      #   run: echo "Running mock install process..." && exit 0

      - name: Validate commit messages
        id: validate_commits
        if: success()
        run: |
          echo "commits_checked=true" >> $GITHUB_OUTPUT
          # Get all commit messages in the PR
          git log --format=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > commit_messages.txt

          # Check each commit message
          INVALID_COMMITS=""
          while IFS= read -r message; do
            if [ -n "$message" ] && ! echo "$message" | grep -qE '^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)\(([a-z0-9-]+)\): .+'; then
              echo "Commit message '$message' does not follow the format: <type>(<scope>): <subject>"
              INVALID_COMMITS="$INVALID_COMMITS\n- '$message'"
            fi
          done < commit_messages.txt

          if [ -n "$INVALID_COMMITS" ]; then
            echo "::error::Found invalid commit messages. All commits must follow the format: <type>(<scope>): <subject>"
            echo "commits_valid=false" >> $GITHUB_OUTPUT
            echo "invalid_commits<<EOF" >> $GITHUB_OUTPUT
            echo "$INVALID_COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "All commit messages follow the required format"

      - name: Run linting
        if: success()
        run: echo "Running mock linting..."

      - name: Run tests
        if: success()
        run: echo "Running mock tests..."

      - name: Run SonarQube scan
        if: success()
        run: |
          echo "Running mock SonarQube scan..."
          echo "Analyzing only changed files in this PR"
          echo "No quality issues found in changed files"
